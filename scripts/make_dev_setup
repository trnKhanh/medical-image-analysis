#!/usr/bin/env sh

# Enable strict mode.
# For more information, see https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#set
set -o errexit
set -o nounset

# Constants
SCRIPT_NAME="$(basename "$0")"                                # Name of this script
SCRIPT_PATH="$(readlink -f "$0")"                             # Path of this script
SCRIPTS_DIRECTORY="$(dirname "$SCRIPT_PATH")"                 # Path of the script's parent directory
ROOT_DIRECTORY="$(dirname "$SCRIPTS_DIRECTORY")"              # Path of the project's root directory
PYTHON_REQUIREMENTS_DIRECTORY="$ROOT_DIRECTORY/requirements"  # Path to directory containing additional requirement.txt files
PYTHON_MINIMUM_VERSION="3.12.0"                               # Minimum Python's version

# Variables
PYTHON_INTERPRETER="python3.12"                   # Which Python interpreter to use in this script
PYTHON_VENV_DIRECTORY="$ROOT_DIRECTORY/.venv"     # Path to Python virtual environment
PYTHON_VENV_OVERWRITE=false                       # Whether to overwrite Python virtual environment if
NO_PROMPT=false                                   # Whether to prompt user for input


# Check if directory is Python virtual environment
is_python_venv_directory() {
  RESULT=false
  if [ -e "$1/bin/activate" ] && [ -e "$1/bin/python" ] ; then RESULT=true ; fi
  printf "%s" "$RESULT"
}


# Extract version of Python interpreter
get_python_interpreter_version() {
  if [ -z "$(which "$1")" ] ; then
    printf "Invalid Python interpreter: %s\n" "$1" 1>&2
    exit 1
  fi
  INFO="$($1 --version)"
  case $INFO in
    Python*) VERSION="$(printf "%s" "$INFO" | cut -d' ' -f2)";;
    *) printf "Invalid Python interpreter: %s\n" "$1" 1>&2 ; exit 1 ;;
  esac
  printf "%s" "$VERSION"
}


# Help message
HELP_MESSAGE="Usage: $SCRIPT_NAME [OPTIONS]

Set up development environment.

Options:
  --python-interpreter PYTHON_INTERPRETER
      Which Python interpreter to use.
        [Default: $PYTHON_INTERPRETER]
  --python-venv-directory PYTHON_VENV_DIRECTORY
      A directory to create Python virtual environment in.
        [Default: $PYTHON_VENV_DIRECTORY]
  --python-venv-overwrite   Whether to overwrite the existing virtual environment.
  --no-prompt               Do not prompt for input.
  -h, --help                Show this message and exit.
"


# Parse arguments and options
OPTIONS="$(getopt \
  -o yh \
  -l python-interpreter:,\
     python-venv-directory:,\
     python-venv-overwrite,\
     no-prompt,\
     help \
  -- "$@" \
)"
eval set -- "${OPTIONS}"
while : ; do
  case $1 in
    --python-interpreter)
      PYTHON_INTERPRETER="$2"
      shift 2
      ;;
    --python-venv-directory)
      PYTHON_VENV_DIRECTORY="$2"
      shift 2
      ;;
    --python-venv-overwrite)
      PYTHON_VENV_OVERWRITE=true
      shift 1
      ;;
    --no-prompt)
      NO_PROMPT=true
      shift 1
      ;;
    -h | --help)
      printf "%b" "$HELP_MESSAGE"
      exit 0
      ;;
    --)
      shift 1
      break
      ;;
  esac
done


# Check Python's version
PYTHON_VERSION=$(get_python_interpreter_version "$PYTHON_INTERPRETER")
if [ "$(printf '%s\n' "$PYTHON_MINIMUM_VERSION" "$PYTHON_VERSION" | sort -V | head -n1)" != "$PYTHON_MINIMUM_VERSION" ]; then
  printf "Python %s or higher is required (current version: %s). \n" "$PYTHON_MINIMUM_VERSION" "$PYTHON_VERSION"
  exit 1
fi

# Display info
printf "Python interpreter (version %s): %s\n" "$PYTHON_VERSION" "$PYTHON_INTERPRETER"
printf "Python virtual environment directory: %s\n" "$PYTHON_VENV_DIRECTORY"


# Clean the location where Python virtual environment is supposed to be created if specified
if [ "$PYTHON_VENV_OVERWRITE" = true ] ; then
  rm -rf "${PYTHON_VENV_DIRECTORY:?}"
fi

# Prompt for cleaning up non-empty directory where Python virtual environment
# is supposed to be created if the directory
if [ -d "$PYTHON_VENV_DIRECTORY" ] \
  && [ -n "$(ls -A "$PYTHON_VENV_DIRECTORY")" ] \
  && [ "$(is_python_venv_directory "$PYTHON_VENV_DIRECTORY")" = false ] \
  && [ "$NO_PROMPT" = false ]
then
  printf "Directory '%s' is not clean.\n" "$PYTHON_VENV_DIRECTORY"
  printf "Clean the directory (y/n)? "
  while true ; do
    read -r PROMPT_RESPONSE;
    case "$PROMPT_RESPONSE" in
      y|Y)
        rm -rf "${PYTHON_VENV_DIRECTORY:?}"
        printf "Directory cleaned: %s\n" "$PYTHON_VENV_DIRECTORY"
        break ;;
      n|N) exit 0 ;;
      *) ;;
    esac
  done
fi

# Perform virtual environment creation
if [ ! -d "$PYTHON_VENV_DIRECTORY" ] || [ -z "$(ls -A "$PYTHON_VENV_DIRECTORY")" ] ; then
  printf "Creating new Python virtual environment...\n"
  $PYTHON_INTERPRETER -m venv "$PYTHON_VENV_DIRECTORY"
  printf "New Python virtual environment created: %s\n" "$PYTHON_VENV_DIRECTORY"
elif [ "$(is_python_venv_directory "$PYTHON_VENV_DIRECTORY")" = true ] ; then
    printf "Detected existing Python (%s) virtual environment.\n" \
           "$(get_python_interpreter_version "$PYTHON_VENV_DIRECTORY/bin/python")"
else
  printf "Cannot create virtual environment at '%s' because the target directory is not clean.\n" \
         "$PYTHON_VENV_DIRECTORY" 1>&2
  exit 1
fi

# Set up Python virtual environment
printf "Setting up Python virtual environment...\n"
printf "Installing project in editable mode...\n"
"$PYTHON_VENV_DIRECTORY"/bin/python -m pip install -e "$ROOT_DIRECTORY"
for PYTHON_REQUIREMENT_FILE in "$PYTHON_REQUIREMENTS_DIRECTORY"/* ; do
  printf "Installing additional dependencies in '%s'...\n" "$PYTHON_REQUIREMENT_FILE"
  "$PYTHON_VENV_DIRECTORY"/bin/python -m pip install -r "$PYTHON_REQUIREMENT_FILE"
done
printf "Python virtual environment setup completed.\n"

# Post notes
POST_EXECUTION_MESSAGE="Development environment setup completed.

# ============================================================================ #
#                                POST-EXECUTION                                #
# ============================================================================ #

To activate Python virtual environment on Bash shell:

  source $PYTHON_VENV_DIRECTORY/bin/activate

"
printf "%b" "$POST_EXECUTION_MESSAGE"